import java.sql.*;
import java.util.Scanner;

public class LibraryManagementSystem {
    private static final String DB_URL = "jdbc:sqlite:library.db";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Connection conn = null;

        try {
            // Connect to the SQLite database
            conn = DriverManager.getConnection(DB_URL);
            System.out.println("Connected to the database.");

            // Create the books table if it doesn't exist
            createBooksTable(conn);

            boolean exit = false;
            while (!exit) {
                System.out.println("\nLibrary Management System");
                System.out.println("1. Add a book");
                System.out.println("2. Search for a book");
                System.out.println("3. Borrow a book");
                System.out.println("4. Return a book");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character

                switch (choice) {
                    case 1:
                        addBook(conn, scanner);
                        break;
                    case 2:
                        searchBook(conn, scanner);
                        break;
                    case 3:
                        borrowBook(conn, scanner);
                        break;
                    case 4:
                        returnBook(conn, scanner);
                        break;
                    case 5:
                        exit = true;
                        break;
                    default:
                        System.out.println("Invalid choice. Try again.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
        } finally {
            // Close the database connection
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    System.err.println("Error: " + e.getMessage());
                }
            }
        }

        scanner.close();
    }

    private static void createBooksTable(Connection conn) throws SQLException {
        String sql = "CREATE TABLE IF NOT EXISTS books ("
                + "id INTEGER PRIMARY KEY AUTOINCREMENT,"
                + "title TEXT NOT NULL,"
                + "author TEXT NOT NULL,"
                + "availability INTEGER NOT NULL DEFAULT 1"
                + ")";
        Statement stmt = conn.createStatement();
        stmt.execute(sql);
        stmt.close();
    }

    private static void addBook(Connection conn, Scanner scanner) throws SQLException {
        System.out.print("Enter the book title: ");
        String title = scanner.nextLine();
        System.out.print("Enter the author: ");
        String author = scanner.nextLine();

        String sql = "INSERT INTO books (title, author) VALUES (?, ?)";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, title);
        stmt.setString(2, author);
        stmt.executeUpdate();
        stmt.close();

        System.out.println("Book added successfully.");
    }

    private static void searchBook(Connection conn, Scanner scanner) throws SQLException {
        System.out.print("Enter the book title or author to search: ");
        String query = scanner.nextLine();

        String sql = "SELECT * FROM books WHERE title LIKE ? OR author LIKE ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, "%" + query + "%");
        stmt.setString(2, "%" + query + "%");
        ResultSet rs = stmt.executeQuery();

        if (!rs.isBeforeFirst()) {
            System.out.println("No books found.");
        } else {
            while (rs.next()) {
                int id = rs.getInt("id");
                String title = rs.getString("title");
                String author = rs.getString("author");
                int availability = rs.getInt("availability");
                System.out.println(id + ". " + title + " by " + author + " (Available: " + (availability == 1 ? "Yes" : "No") + ")");
            }
        }

        rs.close();
        stmt.close();
    }

    private static void borrowBook(Connection conn, Scanner scanner) throws SQLException {
        System.out.print("Enter the book ID to borrow: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        String sql = "UPDATE books SET availability = 0 WHERE id = ? AND availability = 1";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, id);
        int rowsUpdated = stmt.executeUpdate();

        if (rowsUpdated == 0) {
            System.out.println("Book is not available or does not exist.");
        } else {
            System.out.println("Book borrowed successfully.");
        }

        stmt.close();
    }

    private static void returnBook(Connection conn, Scanner scanner) throws SQLException {
        System.out.print("Enter the book ID to return: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        String sql = "UPDATE books SET availability = 1 WHERE id = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, id);
        int rowsUpdated = stmt.executeUpdate();

        if (rowsUpdated == 0) {
            System.out.println("Book does not exist or was not borrowed.");
        } else {
            System.out.println("Book returned successfully.");
        }

        stmt.close();
    }
}
